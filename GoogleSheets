import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.SheetsScopes;
import com.google.api.services.sheets.v4.model.AppendValuesResponse;
import com.google.api.services.sheets.v4.model.ValueRange;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.eclipse.jetty.util.IO;

import javax.swing.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class GoogleSheets
{
    private static Sheets sheetsService;
    private static String APPLICATION_NAME = "CFKPROJECT";
    private static String SPREADSHEET_ID = "1EEL4xxxztE_TOwwIuVVSVZIXQ5ixU0Ds6B19SBg8jsM";

    private static Credential authorize()
    {
        try
        {
            InputStream in = GoogleSheets.class.getResourceAsStream("/credentials.json");
            GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JacksonFactory.getDefaultInstance(),new InputStreamReader(in));
            List<String> scopes = Arrays.asList(SheetsScopes.SPREADSHEETS,SheetsScopes.DRIVE);
            GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(GoogleNetHttpTransport.newTrustedTransport(),JacksonFactory.getDefaultInstance(),clientSecrets,scopes)
                    .setDataStoreFactory(new FileDataStoreFactory(new java.io.File("tokens")))
                    .setAccessType("offline")
                    .build();

            Credential credential = new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
            return credential;
        }
        catch (IOException e)
        {

        }
        catch (GeneralSecurityException e)
        {

        }
        return null;
    }

    public static Sheets getSheetsService()
    {
        Credential credential = authorize();
        try
        {
            return new Sheets.Builder(GoogleNetHttpTransport.newTrustedTransport(),JacksonFactory.getDefaultInstance(),credential)
                    .setApplicationName(APPLICATION_NAME)
                    .build();
        }
        catch (IOException e)
        {

        }
        catch (GeneralSecurityException g)
        {

        }
        return null;

    }
    public static void main(String... args) throws IOException, GeneralSecurityException
    {
        sheetsService = getSheetsService();
        ValueRange appendBody = new ValueRange()
                .setValues(Arrays.asList(Arrays.asList("this","is","a","test")));
        AppendValuesResponse appendResult = sheetsService.spreadsheets().values()
                .append(SPREADSHEET_ID,"Sheet1",appendBody)
                .setValueInputOption("USER_ENTERED")
                .setInsertDataOption("INSERT_ROWS")
                .setIncludeValuesInResponse(true)
                .execute();

    }
}
